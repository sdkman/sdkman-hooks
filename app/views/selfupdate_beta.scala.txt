@(cliVersion: String, baseUrl: String)#!/bin/bash
#
#   Copyright 2017 Marco Vermeulen
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

# selfupdate:- channel: beta; version: @cliVersion; api: @baseUrl

# Global variables
SDKMAN_SERVICE="@baseUrl"
SDKMAN_VERSION="@cliVersion"
SDKMAN_PLATFORM=$(uname)

# OS specific support (must be 'true' or 'false').
cygwin=false;
darwin=false;
solaris=false;
freebsd=false;
linux=false;
case "$(uname)" in
    CYGWIN*)
        cygwin=true
        ;;
    Darwin*)
        darwin=true
        ;;
    SunOS*)
        solaris=true
        ;;
    FreeBSD*)
        freebsd=true
        ;;
    Linux*)
        linux=true
esac


function __sdkman_echo_debug {
    if [[ "$sdkman_debug_mode" == 'true' ]]; then
        echo "$1"
    fi
}

# setup

echo ""
echo "Updating SDKMAN..."

if [ -z "$SDKMAN_DIR" ]; then
	SDKMAN_DIR="$HOME/.sdkman"
fi

sdkman_tmp_folder="${SDKMAN_DIR}/tmp"
sdkman_zip_file="${sdkman_tmp_folder}/sdkman-${SDKMAN_VERSION}.zip"
sdkman_zip_base_folder="${sdkman_tmp_folder}/sdkman-${SDKMAN_VERSION}"

# fetch new distribution and check integrity
download_url="${SDKMAN_SERVICE}/broker/download/sdkman/selfupdate/${SDKMAN_VERSION}/${SDKMAN_PLATFORM}"
__sdkman_echo_debug "Download new scripts from: ${download_url}"
__sdkman_echo_debug "Download new scripts to: ${sdkman_zip_file}"
curl --location --progress-bar "$download_url" > "$sdkman_zip_file"

ARCHIVE_OK=$(unzip -qt "$sdkman_zip_file" | grep 'No errors detected in compressed data')
if [[ -z "$ARCHIVE_OK" ]]; then
	echo "Downloaded zip archive corrupt. Are you connected to the internet?"
	echo ""
	echo "If problems persist, please ask for help on our Slack:"
	echo "* easy sign up: https://slack.sdkman.io/"
	echo "* report on channel: https://sdkman.slack.com/app_redirect?channel=user-issues"
	exit
fi

# prepare candidates
SDKMAN_CANDIDATES_CSV=$(curl -s "$SDKMAN_SERVICE/candidates/all")
__sdkman_echo_debug "Fetched candidates: $SDKMAN_CANDIDATES_CSV"
echo "$SDKMAN_CANDIDATES_CSV" > "${SDKMAN_DIR}/var/candidates"
__sdkman_echo_debug "Overwritten cache: $(cat "${SDKMAN_DIR}/var/candidates")"

# extract new distribution
__sdkman_echo_debug "Extract script archive..."
__sdkman_echo_debug "Unzipping script archive to: ${sdkman_tmp_folder}"
if [[ "$cygwin" == 'true' ]]; then
	__sdkman_echo_debug "Cygwin detected - normalizing paths for unzip..."
	sdkman_tmp_folder=$(cygpath -w "$sdkman_tmp_folder")
	sdkman_zip_file=$(cygpath -w "$sdkman_zip_file")
	sdkman_zip_base_folder=$(cygpath -w "$sdkman_zip_base_folder")
fi
unzip -qo "$sdkman_zip_file" -d "$sdkman_tmp_folder"

echo "Install scripts..."
mv "${sdkman_zip_base_folder}/"* "$SDKMAN_DIR"
rm -rf "$sdkman_zip_base_folder"

# prime config file
__sdkman_echo_debug "Prime the config file..."
sdkman_config_file="${SDKMAN_DIR}/etc/config"
touch "$sdkman_config_file"
if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_auto_answer') ]]; then
	echo "sdkman_auto_answer=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_selfupdate_enable') ]]; then
	echo "sdkman_selfupdate_enable=true" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_insecure_ssl') ]]; then
	echo "sdkman_insecure_ssl=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_curl_connect_timeout') ]]; then
	echo "sdkman_curl_connect_timeout=7" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_curl_max_time') ]]; then
	echo "sdkman_curl_max_time=10" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_beta_channel') ]]; then
	echo "sdkman_beta_channel=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_debug_mode') ]]; then
	echo "sdkman_debug_mode=true" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_colour_enable') ]]; then
	echo "sdkman_colour_enable=true" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_auto_env') ]]; then
	echo "sdkman_auto_env=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_rosetta2_compatible') ]]; then
	echo "sdkman_rosetta2_compatible=true" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_auto_complete') ]]; then
    if [ -z "$ZSH_VERSION" -a -z "$BASH_VERSION" ]; then
        echo "sdkman_auto_complete=false" >> "$sdkman_config_file"
    else
        echo "sdkman_auto_complete=true" >> "$sdkman_config_file"
    fi
fi

# drop version token
echo "$SDKMAN_VERSION" > "${SDKMAN_DIR}/var/version"

# clean up tmp folder
rm -rvf "${SDKMAN_DIR}"/tmp
mkdir -v "${SDKMAN_DIR}"/tmp

# the end
echo ""
echo ""
echo "Successfully upgraded SDKMAN!"
echo ""
echo "Open a new terminal to start using SDKMAN $SDKMAN_VERSION."
echo ""
if [[ "$sdkman_beta_channel" == 'true' ]]; then
	echo "You are subscribed to the BETA channel."
	echo "To return to STABLE, simply follow the instructions on:"
else
	echo "To join our BETA channel, simply follow the instructions on:"
fi
echo ""
echo "   http://sdkman.io/install"
echo ""
echo "Enjoy!!!"
echo ""
