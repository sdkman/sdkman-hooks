@import java.time.LocalDateTime
@import java.time.format.DateTimeFormatter
@(cliVersion: String, cliNativeVersion: String, baseUrl: String, beta: Boolean)#!/bin/bash
@includes.license()

@includes.trap_errors()

@includes.statusline("selfupdate", cliVersion, baseUrl, beta)

# Global variables
SDKMAN_SERVICE="@baseUrl"
SDKMAN_VERSION="@cliVersion"
SDKMAN_NATIVE_VERSION="@cliNativeVersion"
SDKMAN_PLATFORM=$(uname)

@includes.os()

function __sdkman_echo_debug {
    if [[ "$sdkman_debug_mode" == 'true' ]]; then
        echo "$1"
    fi
}

# setup

echo ""
echo "Updating SDKMAN..."

if [ -z "$SDKMAN_DIR" ]; then
	SDKMAN_DIR="$HOME/.sdkman"
fi

sdkman_bin_folder="${SDKMAN_DIR}/bin"
sdkman_contrib_folder="${SDKMAN_DIR}/contrib"
sdkman_src_folder="${SDKMAN_DIR}/src"
sdkman_archives_folder="${SDKMAN_DIR}/archives"
sdkman_tmp_folder="${SDKMAN_DIR}/tmp"
sdkman_zip_file="${sdkman_tmp_folder}/sdkman-${SDKMAN_VERSION}.zip"
sdkman_zip_base_folder="${sdkman_tmp_folder}/sdkman-${SDKMAN_VERSION}"

# fetch new distribution and check integrity
download_url="${SDKMAN_SERVICE}/broker/download/sdkman/selfupdate/${SDKMAN_VERSION}/${SDKMAN_PLATFORM}"
__sdkman_echo_debug "Download new scripts from: ${download_url}"
__sdkman_echo_debug "Download new scripts to: ${sdkman_zip_file}"
curl --location --progress-bar "$download_url" > "$sdkman_zip_file"

ARCHIVE_OK=$(unzip -qt "$sdkman_zip_file" | grep 'No errors detected in compressed data')
if [[ -z "$ARCHIVE_OK" ]]; then
	echo "Downloaded zip archive corrupt. Are you connected to the internet?"
	echo ""
	echo "If problems persist, please ask for help on our Slack:"
	echo "* easy sign up: https://slack.sdkman.io/"
	echo "* report on channel: https://sdkman.slack.com/app_redirect?channel=user-issues"
	exit
fi

# extract new distribution
__sdkman_echo_debug "Extract script archive..."
__sdkman_echo_debug "Unzipping script archive to: ${sdkman_tmp_folder}"
if [[ "$cygwin" == 'true' ]]; then
	__sdkman_echo_debug "Cygwin detected - normalizing paths for unzip..."
	sdkman_tmp_folder=$(cygpath -w "$sdkman_tmp_folder")
	sdkman_zip_file=$(cygpath -w "$sdkman_zip_file")
	sdkman_zip_base_folder=$(cygpath -w "$sdkman_zip_base_folder")
fi
unzip -qo "$sdkman_zip_file" -d "$sdkman_tmp_folder"

echo "Install scripts..."
rm -rf $sdkman_bin_folder
rm -rf $sdkman_contrib_folder
rm -rf $sdkman_src_folder
mv "${sdkman_zip_base_folder}/"* "$SDKMAN_DIR"
rm -rf "$sdkman_zip_base_folder"
rm -rf "$sdkman_archives_folder"

# prepare candidates
SDKMAN_CANDIDATES_CSV=$(curl -s "$SDKMAN_SERVICE/candidates/all")
__sdkman_echo_debug "Fetched candidates: $SDKMAN_CANDIDATES_CSV"
echo "$SDKMAN_CANDIDATES_CSV" > "${SDKMAN_DIR}/var/candidates"
__sdkman_echo_debug "Overwritten cache: $(cat "${SDKMAN_DIR}/var/candidates")"

# prime config file
echo "Update config file..."
echo ""
sdkman_config_file="${SDKMAN_DIR}/etc/config"
sdkman_config_file_tmp="${SDKMAN_DIR}/etc/config.tmp"
touch "$sdkman_config_file"
cp "$sdkman_config_file" "$sdkman_config_file_tmp"
if ! grep 'sdkman_auto_answer' "${sdkman_config_file_tmp}"; then
	echo "sdkman_auto_answer=false" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_insecure_ssl' "${sdkman_config_file_tmp}"; then
	echo "sdkman_insecure_ssl=false" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_curl_connect_timeout' "${sdkman_config_file_tmp}"; then
	echo "sdkman_curl_connect_timeout=7" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_curl_max_time' "${sdkman_config_file_tmp}"; then
	echo "sdkman_curl_max_time=10" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_beta_channel' "${sdkman_config_file_tmp}"; then
	echo "sdkman_beta_channel=@beta" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_debug_mode' "${sdkman_config_file_tmp}"; then
	echo "sdkman_debug_mode=false" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_colour_enable' "${sdkman_config_file_tmp}"; then
	echo "sdkman_colour_enable=true" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_auto_env' "${sdkman_config_file_tmp}"; then
	echo "sdkman_auto_env=false" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_rosetta2_compatible' "${sdkman_config_file_tmp}"; then
	echo "sdkman_rosetta2_compatible=false" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_checksum_enable' "${sdkman_config_file_tmp}"; then
	echo "sdkman_checksum_enable=true" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_selfupdate_feature' "${sdkman_config_file_tmp}"; then
	echo "sdkman_selfupdate_feature=true" >> "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_auto_complete' "${sdkman_config_file_tmp}"; then
    if [ -z "$ZSH_VERSION" -a -z "$BASH_VERSION" ]; then
        echo "sdkman_auto_complete=false" >> "$sdkman_config_file_tmp"
    else
        echo "sdkman_auto_complete=true" >> "$sdkman_config_file_tmp"
    fi
fi

# migrate deprecated sdkman_selfupdate_enable configuration
if grep 'sdkman_selfupdate_enable' "${sdkman_config_file_tmp}"; then
    sed 's/sdkman_selfupdate_enable/sdkman_auto_update/' "$sdkman_config_file_tmp" > "${sdkman_config_file_tmp}.tmp"
    mv "${sdkman_config_file_tmp}.tmp" "$sdkman_config_file_tmp"
fi

if ! grep 'sdkman_auto_update' "${sdkman_config_file_tmp}"; then
	echo "sdkman_auto_update=true" >> "$sdkman_config_file_tmp"
fi

# create config backup and overwrite with updated config
echo ""
echo "Create config file backup..."
@defining(LocalDateTime.now()) { now =>
    @defining(DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss")) { formatter =>
sdkman_config_file_backup="${sdkman_config_file}-@cliVersion-@{now.format(formatter)}.bak"
__sdkman_echo_debug "Write backup file: $sdkman_config_file_backup"
mv "$sdkman_config_file" "$sdkman_config_file_backup"
    }
}
mv "$sdkman_config_file_tmp" "$sdkman_config_file"

# drop version token
echo "$SDKMAN_VERSION" > "${SDKMAN_DIR}/var/version"
echo "$SDKMAN_NATIVE_VERSION" > "${SDKMAN_DIR}/var/version_native"

# clean up tmp folder
rm -rf "${SDKMAN_DIR}"/tmp
mkdir "${SDKMAN_DIR}"/tmp

@includes.selfupdate_message(beta)