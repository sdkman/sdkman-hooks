@(cliVersion: String, channel: String, baseUrl: String)#!/bin/bash
#
#   Copyright 2017 Marco Vermeulen
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

#Selfupdate: @channel

# OS specific support (must be 'true' or 'false').
cygwin=false;
darwin=false;
solaris=false;
freebsd=false;
linux=false;
case "$(uname)" in
    CYGWIN*)
        cygwin=true
        ;;
    Darwin*)
        darwin=true
        ;;
    SunOS*)
        solaris=true
        ;;
    FreeBSD*)
        freebsd=true
        ;;
    Linux*)
        linux=true
esac


function __sdkman_echo_debug {
    if [[ "$sdkman_debug_mode" == 'true' ]]; then
        echo "$1"
    fi
}

# setup

echo ""
echo "Updating SDKMAN..."

SDKMAN_SERVICE="@baseUrl"
SDKMAN_VERSION="@cliVersion"
SDKMAN_PLATFORM=$(uname)

if [ -z "$SDKMAN_DIR" ]; then
	SDKMAN_DIR="$HOME/.sdkman"
fi

sdkman_bin_folder="${SDKMAN_DIR}/bin"
sdkman_tmp_zip="${SDKMAN_DIR}/tmp/sdkman-${SDKMAN_VERSION}.zip"
sdkman_stage_folder="${SDKMAN_DIR}/tmp/stage"
sdkman_src_folder="${SDKMAN_DIR}/src"

# fetch new distribution and check integrity
download_url="${SDKMAN_SERVICE}/broker/download/sdkman/selfupdate/${SDKMAN_VERSION}/${SDKMAN_PLATFORM}"
__sdkman_echo_debug "Download new scripts from: ${download_url}"
__sdkman_echo_debug "Download new scripts to: ${sdkman_tmp_zip}"
curl --location --progress-bar "$download_url" > "$sdkman_tmp_zip"

ARCHIVE_OK=$(unzip -qt "$sdkman_tmp_zip" | grep 'No errors detected in compressed data')
if [[ -z "$ARCHIVE_OK" ]]; then
	echo "Downloaded zip archive corrupt. Are you connected to the internet?"
	echo ""
	echo "If problem persists, please ask for help on https://gitter.im/sdkman/user-issues"
	exit
fi


# prepare file system
__sdkman_echo_debug "Purge existing scripts..."
rm -rf "$sdkman_bin_folder"
rm -rf "$sdkman_src_folder"

__sdkman_echo_debug "Refresh directory structure..."
mkdir -p "${SDKMAN_DIR}/bin"
mkdir -p "${SDKMAN_DIR}/candidates"
mkdir -p "${SDKMAN_DIR}/ext"
mkdir -p "${SDKMAN_DIR}/etc"
mkdir -p "${SDKMAN_DIR}/src"
mkdir -p "${SDKMAN_DIR}/var"
mkdir -p "${SDKMAN_DIR}/archives"
mkdir -p "${SDKMAN_DIR}/tmp"

# prepare candidates
SDKMAN_CANDIDATES_CSV=$(curl -s "$SDKMAN_SERVICE/candidates/all")
__sdkman_echo_debug "Fetched candidates: $SDKMAN_CANDIDATES_CSV"
echo "$SDKMAN_CANDIDATES_CSV" > "${SDKMAN_DIR}/var/candidates"
__sdkman_echo_debug "Overwritten cache: $(cat "${SDKMAN_DIR}/var/candidates")"

# remove empty candidate directories
# convert csv to array
OLD_IFS="$IFS"
IFS=","
SDKMAN_CANDIDATES=(${SDKMAN_CANDIDATES_CSV})
IFS="$OLD_IFS"

for candidate in "${SDKMAN_CANDIDATES[@@]}"; do
    if [[ -n "$candidate" && -d "${SDKMAN_DIR}/${candidate}" && ! -L "${SDKMAN_DIR}/${candidate}" ]]; then
        if [[ -z "$(ls -A ${SDKMAN_DIR}/${candidate})" ]]; then
            __sdkman_echo_debug "Attempt removal of ${candidate} dir: ${SDKMAN_DIR}/${candidate}"
            rmdir "${SDKMAN_DIR}/${candidate}"
        else
            __sdkman_echo_debug "Moving this ${candidate} into dir: ${SDKMAN_DIR}/candidates/${candidate} and symlinking into dir: ${SDKMAN_DIR}/${candidate}"
            OLD_CURRENT_DIR=$(readlink "${SDKMAN_DIR}/${candidate}/current")
            NEW_CURRENT_DIR=$(echo "$OLD_CURRENT_DIR" | sed "s_${SDKMAN_DIR}_${SDKMAN_DIR}/candidates_g")
            unlink "${SDKMAN_DIR}/${candidate}/current"
            mv "${SDKMAN_DIR}/${candidate}" "${SDKMAN_DIR}/candidates/${candidate}"
            ln -s "$NEW_CURRENT_DIR" "${SDKMAN_DIR}/candidates/groovy/current"
            ln -s "${SDKMAN_DIR}/candidates/${candidate}" "${SDKMAN_DIR}/${candidate}"
        fi
    fi
done

# extract new distribution
__sdkman_echo_debug "Extract script archive..."
__sdkman_echo_debug "Unziping scripts to: ${sdkman_stage_folder}"
if [[ "$cygwin" == 'true' ]]; then
	__sdkman_echo_debug "Cygwin detected - normalizing paths for unzip..."
	unzip -qo $(cygpath -w "$sdkman_tmp_zip") -d $(cygpath -w "$sdkman_stage_folder")
else
	unzip -qo "$sdkman_tmp_zip" -d "$sdkman_stage_folder"
fi

__sdkman_echo_debug "Moving sdkman-init file to bin folder..."
mv "${sdkman_stage_folder}/sdkman-init.sh" "$sdkman_bin_folder"

__sdkman_echo_debug "Move remaining module scripts to src folder: ${sdkman_src_folder}"
mv "$sdkman_stage_folder"/sdkman-* "$sdkman_src_folder"

__sdkman_echo_debug "Clean up staging folder..."
rm -rf "$sdkman_stage_folder"


# prime config file
__sdkman_echo_debug "Prime the config file..."
sdkman_config_file="${SDKMAN_DIR}/etc/config"
touch "$sdkman_config_file"
if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_auto_answer') ]]; then
	echo "sdkman_auto_answer=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_auto_selfupdate') ]]; then
	echo "sdkman_auto_selfupdate=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_insecure_ssl') ]]; then
	echo "sdkman_insecure_ssl=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_disable_gvm_alias') ]]; then
	echo "sdkman_disable_gvm_alias=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_curl_connect_timeout') ]]; then
	echo "sdkman_curl_connect_timeout=7" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_curl_max_time') ]]; then
	echo "sdkman_curl_max_time=10" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_beta_channel') ]]; then
	echo "sdkman_beta_channel=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_debug_mode') ]]; then
	echo "sdkman_debug_mode=false" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_colour_enable') ]]; then
	echo "sdkman_colour_enable=true" >> "$sdkman_config_file"
fi

if [[ -z $(cat ${sdkman_config_file} | grep 'sdkman_colour_style') ]]; then
	echo "sdkman_colour_style=light # light/dark" >> "$sdkman_config_file"
fi


# drop version token
echo "$SDKMAN_VERSION" > "${SDKMAN_DIR}/var/version"


# the end
echo ""
echo ""
echo "Successfully upgraded SDKMAN!"
echo ""
echo "Open a new terminal to start using SDKMAN $SDKMAN_VERSION."
echo ""
if [[ "$sdkman_beta_channel" == 'true' ]]; then
	echo "You are subscribed to the BETA channel."
	echo "To return to STABLE, simply follow the instructions on:"
else
	echo "To join our BETA channel, simply follow the instructions on:"
fi
echo ""
echo "   http://sdkman.io/install.html"
echo ""
echo "Enjoy!!!"
echo ""
